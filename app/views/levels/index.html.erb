<!-- ><h1>Listing levels</h1>

<table>
  <thead>
    <tr>
      <th>Red</th>
      <th>Blue</th>
      <th>Green</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @levels.each do |level| %>
      <tr>
        <td><%= level.red %></td>
        <td><%= level.blue %></td>
        <td><%= level.green %></td>
        <td><%= link_to 'Show', level %></td>
        <td><%= link_to 'Edit', edit_level_path(level) %></td>
        <td><%= link_to 'Destroy', level, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<br>

<%= link_to 'New Level', new_level_path %>  -->

<!-- <script type='text/javascript'>
	var two = new Two({
	    fullscreen: true,
	    autostart: true
	}).appendTo(document.body);
	var rect = two.makeRectangle(two.width/2, two.height/2, two.width, two.height);
	rect.fill = 'rgb(0,0,0)';
	rect.opacity = 1.0;
	rect.noStroke();
	var circle = two.makeCircle(72,100,50);
	circle.fill = '#00ffff';
	circle.stroke = '#00ffdd';
	circle.linewidth = 5;
	two.update();
</script>
-->

<script type='text/javascript'>
$(function ballTest() {

  var two = new Two({
    fullscreen: true,
    autostart: true
  }).appendTo(document.body);

  Two.Resoultion = 32;

  var delta = new Two.Vector();
  var mouse = new Two.Vector();
  var drag = 0.33;
  var radius = 50;

  var shadow = two.makeCircle(two.width / 2, two.height / 2, radius);
  shadow.noStroke().fill = 'rgba(0, 0, 0, 0.2)';
  shadow.offset = new Two.Vector(- radius / 2, radius * 2);
  shadow.scale = 0.85;

  var ball = two.makeCircle(two.width / 2, two.height / 2, radius);
  ball.noStroke().fill = 'white';

  _.each(ball.vertices, function(v) {
    v.origin = new Two.Vector().copy(v);
  });

  var $window = $(window)
    .bind('mousemove', function(e) {
      mouse.x = e.clientX;
      mouse.y = e.clientY;
      shadow.offset.x = 5 * radius * (mouse.x - two.width / 2) / two.width;
      shadow.offset.y = 5 * radius * (mouse.y - two.height / 2) / two.height;
    })
    .bind('touchstart', function() {
      e.preventDefault();
      return false;
    })
    .bind('touchmove', function(e) {
      e.preventDefault();
      var touch = e.originalEvent.changedTouches[0];
      mouse.x = touch.pageX;
      mouse.y = touch.pageY;
      shadow.offset.x = 5 * radius * (mouse.x - two.width / 2) / two.width;
      shadow.offset.y = 5 * radius * (mouse.y - two.height / 2) / two.height;
      return false;
    });

  two.bind('update', function() {

      delta.copy(mouse).subSelf(ball.translation);

      _.each(ball.vertices, function(v, i) {

        var dist = v.origin.distanceTo(delta);
        var pct = dist / radius;

        var x = delta.x * pct;
        var y = delta.y * pct;

        var destx = v.origin.x - x;
        var desty = v.origin.y - y;

        v.x += (destx - v.x) * drag;
        v.y += (desty - v.y) * drag;

        shadow.vertices[i].copy(v);

      });

      ball.translation.addSelf(delta);

      shadow.translation.copy(ball.translation);
      shadow.translation.addSelf(shadow.offset);

    });

});
</script>
